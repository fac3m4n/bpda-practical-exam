{
  "address": "0x4ccaB2e30b019A6034610Ce1Fe79083d3Ad7B346",
  "abi": [
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ListingRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "TokenListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "TokenPurchased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buyToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "enum Marketplace.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct Marketplace.Listing[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyListings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "enum Marketplace.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct Marketplace.Listing[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPurchasedTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "enum Marketplace.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct Marketplace.Listing[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum Marketplace.TokenType",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum Marketplace.TokenType",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "removeListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x067b0c7d8068ff9aa3e0959a6288605ddbad7dab894e2f709d15136d44538bde",
  "receipt": {
    "to": null,
    "from": "0x4b7866e717f27Fa1C38313D25F647aE0598571BD",
    "contractAddress": "0x4ccaB2e30b019A6034610Ce1Fe79083d3Ad7B346",
    "transactionIndex": 67,
    "gasUsed": "1171976",
    "logsBloom": "0x
    "blockHash": "0xea3b800f69dd04dc1356911fa8324338fb0a1d2c4f69b296e44d7aa1d268dce5",
    "transactionHash": "0x067b0c7d8068ff9aa3e0959a6288605ddbad7dab894e2f709d15136d44538bde",
    "logs": [],
    "blockNumber": 7548480,
    "cumulativeGasUsed": "8708823",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7ea78f417628404635adfd4df46a31fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum Marketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyListings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum Marketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchasedTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum Marketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum Marketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum Marketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract Marketplace is ReentrancyGuard {\\n    uint256 private _listingIds;\\n\\n    enum TokenType { FUNGIBLE, NON_FUNGIBLE }\\n\\n    struct Listing {\\n        uint256 listingId;\\n        address seller;\\n        address tokenAddress;\\n        TokenType tokenType;\\n        uint256 tokenId;\\n        uint256 quantity;\\n        uint256 price;\\n        bool active;\\n    }\\n\\n    mapping(uint256 => Listing) public listings;\\n    mapping(address => uint256[]) private userListings;\\n    mapping(address => uint256[]) private userPurchases;\\n\\n    event TokenListed(\\n        uint256 indexed listingId,\\n        address indexed seller,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 price\\n    );\\n\\n    event TokenPurchased(\\n        uint256 indexed listingId,\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 quantity,\\n        uint256 price\\n    );\\n\\n    event ListingRemoved(uint256 indexed listingId, address indexed seller);\\n\\n    function listToken(\\n        address tokenAddress,\\n        TokenType tokenType,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 price\\n    ) external returns (uint256) {\\n        require(price > 0, \\\"Price must be greater than zero\\\");\\n        require(quantity > 0, \\\"Quantity must be greater than zero\\\");\\n\\n        if (tokenType == TokenType.FUNGIBLE) {\\n            IERC20 token = IERC20(tokenAddress);\\n            require(token.balanceOf(msg.sender) >= quantity, \\\"Insufficient token balance\\\");\\n            require(token.allowance(msg.sender, address(this)) >= quantity, \\\"Insufficient token allowance\\\");\\n        } else {\\n            IERC721 token = IERC721(tokenAddress);\\n            require(token.ownerOf(tokenId) == msg.sender, \\\"Not token owner\\\");\\n            require(token.getApproved(tokenId) == address(this), \\\"Token not approved\\\");\\n            require(quantity == 1, \\\"NFT quantity must be 1\\\");\\n        }\\n\\n        _listingIds++;\\n        uint256 listingId = _listingIds;\\n\\n        listings[listingId] = Listing({\\n            listingId: listingId,\\n            seller: msg.sender,\\n            tokenAddress: tokenAddress,\\n            tokenType: tokenType,\\n            tokenId: tokenId,\\n            quantity: quantity,\\n            price: price,\\n            active: true\\n        });\\n\\n        userListings[msg.sender].push(listingId);\\n\\n        emit TokenListed(listingId, msg.sender, tokenAddress, tokenId, quantity, price);\\n        return listingId;\\n    }\\n\\n    function buyToken(uint256 listingId, uint256 quantity) external payable nonReentrant {\\n        Listing storage listing = listings[listingId];\\n        require(listing.active, \\\"Listing is not active\\\");\\n        require(quantity > 0 && quantity <= listing.quantity, \\\"Invalid quantity\\\");\\n        require(msg.value >= listing.price * quantity, \\\"Insufficient payment\\\");\\n\\n        if (listing.tokenType == TokenType.FUNGIBLE) {\\n            IERC20(listing.tokenAddress).transferFrom(listing.seller, msg.sender, quantity);\\n        } else {\\n            require(quantity == 1, \\\"NFT quantity must be 1\\\");\\n            IERC721(listing.tokenAddress).transferFrom(listing.seller, msg.sender, listing.tokenId);\\n        }\\n\\n        listing.quantity -= quantity;\\n        if (listing.quantity == 0) {\\n            listing.active = false;\\n        }\\n\\n        payable(listing.seller).transfer(msg.value);\\n        userPurchases[msg.sender].push(listingId);\\n\\n        emit TokenPurchased(listingId, msg.sender, listing.seller, quantity, listing.price * quantity);\\n    }\\n\\n    function removeListing(uint256 listingId) external {\\n        Listing storage listing = listings[listingId];\\n        require(listing.seller == msg.sender, \\\"Not the seller\\\");\\n        require(listing.active, \\\"Listing not active\\\");\\n\\n        listing.active = false;\\n        emit ListingRemoved(listingId, msg.sender);\\n    }\\n\\n    function getListings() external view returns (Listing[] memory) {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 1; i <= _listingIds; i++) {\\n            if (listings[i].active) {\\n                activeCount++;\\n            }\\n        }\\n\\n        Listing[] memory activeListings = new Listing[](activeCount);\\n        uint256 index = 0;\\n        for (uint256 i = 1; i <= _listingIds; i++) {\\n            if (listings[i].active) {\\n                activeListings[index] = listings[i];\\n                index++;\\n            }\\n        }\\n        return activeListings;\\n    }\\n\\n    function getMyListings() external view returns (Listing[] memory) {\\n        uint256[] storage userListingIds = userListings[msg.sender];\\n        Listing[] memory myListings = new Listing[](userListingIds.length);\\n        \\n        for (uint256 i = 0; i < userListingIds.length; i++) {\\n            myListings[i] = listings[userListingIds[i]];\\n        }\\n        return myListings;\\n    }\\n\\n    function getPurchasedTokens() external view returns (Listing[] memory) {\\n        uint256[] storage purchaseIds = userPurchases[msg.sender];\\n        Listing[] memory purchasedListings = new Listing[](purchaseIds.length);\\n        \\n        for (uint256 i = 0; i < purchaseIds.length; i++) {\\n            purchasedListings[i] = listings[purchaseIds[i]];\\n        }\\n        return purchasedListings;\\n    }\\n}\",\"keccak256\":\"0xd403d7fbcff0730042ce786e710ffb71ec9b0425beb2db36618792d20bbdb28d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061006f5760003560e01c8063648e30061161004e578063648e3006146100d4578063b6d999ab146100e9578063de74e57b14610117578063f1b2d6a31461019a57600080fd5b8062754eea14610074578063057466ea1461009f578063479ad4c3146100b4575b600080fd5b34801561008057600080fd5b506100896101af565b6040516100969190611115565b60405180910390f35b6100b26100ad3660046111ba565b61032a565b005b3480156100c057600080fd5b506100b26100cf3660046111dc565b6106ac565b3480156100e057600080fd5b5061008961078d565b3480156100f557600080fd5b5061010961010436600461120d565b610901565b604051908152602001610096565b34801561012357600080fd5b506101866101323660046111dc565b6002602081905260009182526040909120805460018201549282015460038301546004840154600585015460069095015493956001600160a01b03908116959084169460ff600160a01b9095048516941688565b604051610096989796959493929190611262565b3480156101a657600080fd5b50610089610eb2565b33600090815260036020526040812080546060929067ffffffffffffffff8111156101dc576101dc6112b5565b60405190808252806020026020018201604052801561021557816020015b610202611096565b8152602001906001900390816101fa5790505b50905060005b8254811015610323576002600084838154811061023a5761023a6112cb565b600091825260208083209091015483528281019390935260409182019020815161010081018352815481526001808301546001600160a01b0390811695830195909552600283015494851693820193909352929091606084019160ff600160a01b90910416908111156102af576102af6110dd565b60018111156102c0576102c06110dd565b815260038201546020820152600482015460408201526005820154606082015260069091015460ff1615156080909101528251839083908110610305576103056112cb565b6020026020010181905250808061031b906112f7565b91505061021b565b5092915050565b61033261106c565b6000828152600260205260409020600681015460ff166103915760405162461bcd60e51b81526020600482015260156024820152744c697374696e67206973206e6f742061637469766560581b60448201526064015b60405180910390fd5b6000821180156103a5575080600401548211155b6103e45760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964207175616e7469747960801b6044820152606401610388565b8181600501546103f49190611310565b34101561043a5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610388565b60006002820154600160a01b900460ff16600181111561045c5761045c6110dd565b036104ea57600281015460018201546040516323b872dd60e01b81526001600160a01b039182166004820152336024820152604481018590529116906323b872dd906064016020604051808303816000875af11580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e4919061132d565b506105ac565b816001146105335760405162461bcd60e51b81526020600482015260166024820152754e4654207175616e74697479206d757374206265203160501b6044820152606401610388565b6002810154600182015460038301546040516323b872dd60e01b81526001600160a01b03928316600482015233602482015260448101919091529116906323b872dd90606401600060405180830381600087803b15801561059357600080fd5b505af11580156105a7573d6000803e3d6000fd5b505050505b818160040160008282546105c09190611356565b909155505060048101546000036105de5760068101805460ff191690555b60018101546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610619573d6000803e3d6000fd5b503360008181526004602090815260408220805460018082018355918452919092200185905582015460058301546001600160a01b03909116919085907f892605e5aa205718bf5422cbe570beb6c419fe374afe9a7f9c8fc114b99020a8908690610685908290611310565b6040805192835260208301919091520160405180910390a4506106a86001600055565b5050565b600081815260026020526040902060018101546001600160a01b031633146107075760405162461bcd60e51b815260206004820152600e60248201526d2737ba103a34329039b2b63632b960911b6044820152606401610388565b600681015460ff166107505760405162461bcd60e51b81526020600482015260126024820152714c697374696e67206e6f742061637469766560701b6044820152606401610388565b60068101805460ff19169055604051339083907f58b0852506006c4be6c7ae72afcd195d9e64d7f5d8947905e914b778e47b7cf390600090a35050565b33600090815260046020526040812080546060929067ffffffffffffffff8111156107ba576107ba6112b5565b6040519080825280602002602001820160405280156107f357816020015b6107e0611096565b8152602001906001900390816107d85790505b50905060005b82548110156103235760026000848381548110610818576108186112cb565b600091825260208083209091015483528281019390935260409182019020815161010081018352815481526001808301546001600160a01b0390811695830195909552600283015494851693820193909352929091606084019160ff600160a01b909104169081111561088d5761088d6110dd565b600181111561089e5761089e6110dd565b815260038201546020820152600482015460408201526005820154606082015260069091015460ff16151560809091015282518390839081106108e3576108e36112cb565b602002602001018190525080806108f9906112f7565b9150506107f9565b60008082116109525760405162461bcd60e51b815260206004820152601f60248201527f5072696365206d7573742062652067726561746572207468616e207a65726f006044820152606401610388565b600083116109ad5760405162461bcd60e51b815260206004820152602260248201527f5175616e74697479206d7573742062652067726561746572207468616e207a65604482015261726f60f01b6064820152608401610388565b60008560018111156109c1576109c16110dd565b03610b44576040516370a0823160e01b8152336004820152869084906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a329190611369565b1015610a805760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610388565b604051636eb1769f60e11b815233600482015230602482015284906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af09190611369565b1015610b3e5760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e7420746f6b656e20616c6c6f77616e6365000000006044820152606401610388565b50610cfa565b6040516331a9108f60e11b815260048101859052869033906001600160a01b03831690636352211e90602401602060405180830381865afa158015610b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb19190611382565b6001600160a01b031614610bf95760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b6044820152606401610388565b60405163020604bf60e21b81526004810186905230906001600160a01b0383169063081812fc90602401602060405180830381865afa158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c649190611382565b6001600160a01b031614610caf5760405162461bcd60e51b8152602060048201526012602482015271151bdad95b881b9bdd08185c1c1c9bdd995960721b6044820152606401610388565b83600114610cf85760405162461bcd60e51b81526020600482015260166024820152754e4654207175616e74697479206d757374206265203160501b6044820152606401610388565b505b60018054906000610d0a836112f7565b919050555060006001549050604051806101000160405280828152602001336001600160a01b03168152602001886001600160a01b03168152602001876001811115610d5857610d586110dd565b8152602080820188905260408083018890526060808401889052600160809094018490526000868152600280855290839020865181559386015184860180546001600160a01b03199081166001600160a01b039384161790915593870151918501805494851692909116918217815591860151939491926001600160a81b0319161790600160a01b908490811115610df257610df26110dd565b021790555060808281015160038381019190915560a0840151600484015560c0840151600584015560e0909301516006909201805460ff1916921515929092179091553360008181526020938452604080822080546001810182559083529185902090910185905580516001600160a01b038c1681529384018990528301879052606083018690529183917fe9f33fbfcd71bdbfdd2c2a95058cbb3f5378444a2676e6cfb173a65cfce389e6910160405180910390a39695505050505050565b6060600060015b6001548111610efc5760008181526002602052604090206006015460ff1615610eea5781610ee6816112f7565b9250505b80610ef4816112f7565b915050610eb9565b5060008167ffffffffffffffff811115610f1857610f186112b5565b604051908082528060200260200182016040528015610f5157816020015b610f3e611096565b815260200190600190039081610f365790505b509050600060015b60015481116110635760008181526002602052604090206006015460ff161561105157600081815260026020818152604092839020835161010081018552815481526001808301546001600160a01b03908116948301949094529382015492831694810194909452916060840191600160a01b900460ff1690811115610fe157610fe16110dd565b6001811115610ff257610ff26110dd565b815260038201546020820152600482015460408201526005820154606082015260069091015460ff1615156080909101528351849084908110611037576110376112cb565b6020026020010181905250818061104d906112f7565b9250505b8061105b816112f7565b915050610f59565b50909392505050565b60026000540361108f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516101008101825260008082526020820181905291810182905290606082019081526020016000815260200160008152602001600081526020016000151581525090565b634e487b7160e01b600052602160045260246000fd5b6002811061111157634e487b7160e01b600052602160045260246000fd5b9052565b602080825282518282018190526000919060409081850190868401855b828110156111ad57815180518552868101516001600160a01b039081168887015286820151168686015260608082015161116e828801826110f3565b50506080818101519086015260a0808201519086015260c0808201519086015260e0908101511515908501526101009093019290850190600101611132565b5091979650505050505050565b600080604083850312156111cd57600080fd5b50508035926020909101359150565b6000602082840312156111ee57600080fd5b5035919050565b6001600160a01b038116811461120a57600080fd5b50565b600080600080600060a0868803121561122557600080fd5b8535611230816111f5565b945060208601356002811061124457600080fd5b94979496505050506040830135926060810135926080909101359150565b8881526001600160a01b03888116602083015287166040820152610100810161128e60608301886110f3565b8560808301528460a08301528360c083015282151560e08301529998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611309576113096112e1565b5060010190565b8082028115828204841417611327576113276112e1565b92915050565b60006020828403121561133f57600080fd5b8151801515811461134f57600080fd5b9392505050565b81810381811115611327576113276112e1565b60006020828403121561137b57600080fd5b5051919050565b60006020828403121561139457600080fd5b815161134f816111f556fea2646970667358221220f95b9680d229f602ddcd2a569aa5a31d5cf1e2f1de4be2b8045641e34519eaf564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 205,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 284,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_listingIds",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 310,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "listings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Listing)305_storage)"
      },
      {
        "astId": 315,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "userListings",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 320,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "userPurchases",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(TokenType)287": {
        "encoding": "inplace",
        "label": "enum Marketplace.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Listing)305_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)305_storage"
      },
      "t_struct(Listing)305_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Listing",
        "members": [
          {
            "astId": 289,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "listingId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 291,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 293,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 296,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "tokenType",
            "offset": 20,
            "slot": "2",
            "type": "t_enum(TokenType)287"
          },
          {
            "astId": 298,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 300,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "quantity",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 302,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 304,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "active",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}